/* #region dist/reset.chunk.d.ts */
import { ReactNode } from 'react';
import * as _vanilla_extract_sprinkles from '@vanilla-extract/sprinkles';

declare const Box: () => null;

declare const BraidProvider: ({ children }: {
    children: ReactNode;
}) => JSX.Element;

declare const breakpointNames: readonly ["mobile", "tablet", "desktop", "wide"];
declare const breakpoints: {
    readonly mobile: 0;
    readonly tablet: 740;
    readonly desktop: 992;
    readonly wide: 1200;
};
type Breakpoint = keyof typeof breakpoints;

declare const sprinkles: ((props: {
    readonly display?: ("none" | "block" | "inline" | "flex" | "inlineBlock" | {
        mobile?: "none" | "block" | "inline" | "flex" | "inlineBlock" | undefined;
        tablet?: "none" | "block" | "inline" | "flex" | "inlineBlock" | undefined;
        desktop?: "none" | "block" | "inline" | "flex" | "inlineBlock" | undefined;
        wide?: "none" | "block" | "inline" | "flex" | "inlineBlock" | undefined;
    } | undefined) | _vanilla_extract_sprinkles.ResponsiveArray<4 | 3 | 2 | 1, "none" | "block" | "inline" | "flex" | "inlineBlock" | null>;
    readonly position?: ("relative" | "absolute" | "fixed" | {
        mobile?: "relative" | "absolute" | "fixed" | undefined;
        tablet?: "relative" | "absolute" | "fixed" | undefined;
        desktop?: "relative" | "absolute" | "fixed" | undefined;
        wide?: "relative" | "absolute" | "fixed" | undefined;
    } | undefined) | _vanilla_extract_sprinkles.ResponsiveArray<4 | 3 | 2 | 1, "relative" | "absolute" | "fixed" | null>;
    readonly paddingTop?: ("none" | "medium" | {
        mobile?: "none" | "medium" | undefined;
        tablet?: "none" | "medium" | undefined;
        desktop?: "none" | "medium" | undefined;
        wide?: "none" | "medium" | undefined;
    } | undefined) | _vanilla_extract_sprinkles.ResponsiveArray<4 | 3 | 2 | 1, "none" | "medium" | null>;
    readonly paddingBottom?: ("none" | "medium" | {
        mobile?: "none" | "medium" | undefined;
        tablet?: "none" | "medium" | undefined;
        desktop?: "none" | "medium" | undefined;
        wide?: "none" | "medium" | undefined;
    } | undefined) | _vanilla_extract_sprinkles.ResponsiveArray<4 | 3 | 2 | 1, "none" | "medium" | null>;
    readonly paddingRight?: ("none" | "medium" | {
        mobile?: "none" | "medium" | undefined;
        tablet?: "none" | "medium" | undefined;
        desktop?: "none" | "medium" | undefined;
        wide?: "none" | "medium" | undefined;
    } | undefined) | _vanilla_extract_sprinkles.ResponsiveArray<4 | 3 | 2 | 1, "none" | "medium" | null>;
    readonly paddingLeft?: ("none" | "medium" | {
        mobile?: "none" | "medium" | undefined;
        tablet?: "none" | "medium" | undefined;
        desktop?: "none" | "medium" | undefined;
        wide?: "none" | "medium" | undefined;
    } | undefined) | _vanilla_extract_sprinkles.ResponsiveArray<4 | 3 | 2 | 1, "none" | "medium" | null>;
    padding?: ("none" | "medium" | {
        mobile?: "none" | "medium" | undefined;
        tablet?: "none" | "medium" | undefined;
        desktop?: "none" | "medium" | undefined;
        wide?: "none" | "medium" | undefined;
    } | undefined) | _vanilla_extract_sprinkles.ResponsiveArray<4 | 3 | 2 | 1, "none" | "medium" | null>;
    paddingY?: ("none" | "medium" | {
        mobile?: "none" | "medium" | undefined;
        tablet?: "none" | "medium" | undefined;
        desktop?: "none" | "medium" | undefined;
        wide?: "none" | "medium" | undefined;
    } | undefined) | _vanilla_extract_sprinkles.ResponsiveArray<4 | 3 | 2 | 1, "none" | "medium" | null>;
    paddingX?: ("none" | "medium" | {
        mobile?: "none" | "medium" | undefined;
        tablet?: "none" | "medium" | undefined;
        desktop?: "none" | "medium" | undefined;
        wide?: "none" | "medium" | undefined;
    } | undefined) | _vanilla_extract_sprinkles.ResponsiveArray<4 | 3 | 2 | 1, "none" | "medium" | null>;
}) => string) & {
    properties: Set<"padding" | "paddingBottom" | "paddingTop" | "paddingLeft" | "paddingRight" | "paddingY" | "paddingX" | "display" | "position">;
};

type Sprinkles = Parameters<typeof sprinkles>[0];
interface Atoms extends Sprinkles {
    reset?: keyof JSX.IntrinsicElements;
}
declare const atoms: ({ reset, ...rest }: Atoms) => string;

export { Box, BraidProvider, type Breakpoint, atoms, breakpointNames, breakpoints };
/* #endregion */
