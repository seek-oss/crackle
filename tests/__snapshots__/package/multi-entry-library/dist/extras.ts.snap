/* #region dist/extras.cjs */
"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const sideEffects_extras_index_cjs = require("./side-effects/extras/index.cjs");
exports.calcAndLog = sideEffects_extras_index_cjs.calcAndLog;
exports.logger = sideEffects_extras_index_cjs.logger;
/* #endregion */


/* #region dist/extras.d.ts */
declare global {
	// eslint-disable-next-line @typescript-eslint/consistent-type-definitions -- It has to be an `interface` so that it can be merged.
	interface SymbolConstructor {
		readonly observable: symbol;
	}
}

declare const logger$1: {
    debug: (msg: string) => false | void;
    info: (msg: string) => void;
    warn: (msg: string) => void;
    error: (msg: string) => void;
    errorWithExitCode: (msg: string) => void;
};

type MathsFn = (a: number, b: number) => number;

type InlinedType = typeof logger$1;
declare const logger: () => void;
declare const calcAndLog: (a: number, b: number, fn: MathsFn) => void;

export { InlinedType, calcAndLog, logger };
/* #endregion */


/* #region dist/extras.mjs */
import { calcAndLog, logger } from "./side-effects/extras/index.mjs";
export {
  calcAndLog,
  logger
};
/* #endregion */
