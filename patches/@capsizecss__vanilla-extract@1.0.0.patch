diff --git a/dist/capsizecss-vanilla-extract.cjs.dev.js b/dist/capsizecss-vanilla-extract.cjs.dev.js
deleted file mode 100644
index 562c6df59022a659c17a0189317b81168fc27e97..0000000000000000000000000000000000000000
diff --git a/dist/capsizecss-vanilla-extract.cjs.js b/dist/capsizecss-vanilla-extract.cjs.js
index 07fa6079407af1e8253c8d4511cda92f3d229984..d0b1cbb228288147ad2dad7594f7c9db070c199f 100644
--- a/dist/capsizecss-vanilla-extract.cjs.js
+++ b/dist/capsizecss-vanilla-extract.cjs.js
@@ -1,7 +1,121 @@
 'use strict';
 
-if (process.env.NODE_ENV === "production") {
-  module.exports = require("./capsizecss-vanilla-extract.cjs.prod.js");
-} else {
-  module.exports = require("./capsizecss-vanilla-extract.cjs.dev.js");
+Object.defineProperty(exports, '__esModule', { value: true });
+
+var css = require('@vanilla-extract/css');
+var core = require('@capsizecss/core');
+var { capsizeVars, capsizeStyle } = require('./styles.css.cjs');
+
+
+function _arrayWithHoles(arr) {
+  if (Array.isArray(arr)) return arr;
 }
+
+function _iterableToArrayLimit(arr, i) {
+  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
+
+  if (_i == null) return;
+  var _arr = [];
+  var _n = true;
+  var _d = false;
+
+  var _s, _e;
+
+  try {
+    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
+      _arr.push(_s.value);
+
+      if (i && _arr.length === i) break;
+    }
+  } catch (err) {
+    _d = true;
+    _e = err;
+  } finally {
+    try {
+      if (!_n && _i["return"] != null) _i["return"]();
+    } finally {
+      if (_d) throw _e;
+    }
+  }
+
+  return _arr;
+}
+
+function _arrayLikeToArray(arr, len) {
+  if (len == null || len > arr.length) len = arr.length;
+
+  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
+
+  return arr2;
+}
+
+function _unsupportedIterableToArray(o, minLen) {
+  if (!o) return;
+  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
+  var n = Object.prototype.toString.call(o).slice(8, -1);
+  if (n === "Object" && o.constructor) n = o.constructor.name;
+  if (n === "Map" || n === "Set") return Array.from(o);
+  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
+}
+
+function _nonIterableRest() {
+  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
+}
+
+function _slicedToArray(arr, i) {
+  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
+}
+
+var createVanillaStyle = function createVanillaStyle(_ref) {
+  var values = _ref.values,
+      mediaQueries = _ref.mediaQueries,
+      debugId = _ref.debugId;
+  var vars = {
+    vars: css.assignVars(capsizeVars, values)
+  };
+
+  if (typeof mediaQueries !== 'undefined') {
+    var mqs = {};
+    Object.entries(mediaQueries['@media']).forEach(function (_ref2) {
+      var _ref3 = _slicedToArray(_ref2, 2),
+          mq = _ref3[0],
+          val = _ref3[1];
+
+      var builtValues = 'capHeightTrim' in val ? val : core.precomputeValues(val);
+      mqs[mq] = {
+        vars: css.assignVars(capsizeVars, builtValues)
+      };
+    });
+    vars['@media'] = mqs;
+  }
+
+  return css.composeStyles(capsizeStyle, css.style(vars, debugId));
+};
+
+function createTextStyle() {
+  var hasMediaQueries = typeof (arguments.length <= 1 ? undefined : arguments[1]) !== 'undefined' && typeof (arguments.length <= 1 ? undefined : arguments[1]) !== 'string';
+  var debugId = hasMediaQueries ? arguments.length <= 2 ? undefined : arguments[2] : arguments.length <= 1 ? undefined : arguments[1];
+  var mediaQueries = hasMediaQueries ? arguments.length <= 1 ? undefined : arguments[1] : undefined;
+
+  if ('capHeightTrim' in (arguments.length <= 0 ? undefined : arguments[0])) {
+    return createVanillaStyle({
+      values: arguments.length <= 0 ? undefined : arguments[0],
+      mediaQueries: mediaQueries,
+      debugId: debugId
+    });
+  }
+
+  return createVanillaStyle({
+    values: core.precomputeValues(arguments.length <= 0 ? undefined : arguments[0]),
+    mediaQueries: mediaQueries,
+    debugId: debugId
+  });
+}
+
+Object.defineProperty(exports, 'precomputeValues', {
+  enumerable: true,
+  get: function () {
+    return core.precomputeValues;
+  }
+});
+exports.createTextStyle = createTextStyle;
diff --git a/dist/capsizecss-vanilla-extract.cjs.prod.js b/dist/capsizecss-vanilla-extract.cjs.prod.js
deleted file mode 100644
index 562c6df59022a659c17a0189317b81168fc27e97..0000000000000000000000000000000000000000
diff --git a/dist/capsizecss-vanilla-extract.esm.js b/dist/capsizecss-vanilla-extract.esm.js
index 5a7caa4744c5edf6c42df40879ee2309751c3cdf..a756fbe7c7290fc9d00410c072427f3e8ee31c68 100644
--- a/dist/capsizecss-vanilla-extract.esm.js
+++ b/dist/capsizecss-vanilla-extract.esm.js
@@ -1,7 +1,8 @@
-import { createThemeContract, style, composeStyles, assignVars } from '@vanilla-extract/css';
-import { createStyleObject, precomputeValues } from '@capsizecss/core';
+import { style, composeStyles, assignVars } from '@vanilla-extract/css';
+import { precomputeValues } from '@capsizecss/core';
+import { capsizeStyle, capsizeVars } from './styles.css.cjs';
+
 export { precomputeValues } from '@capsizecss/core';
-import * as __vanilla_filescope__ from '@vanilla-extract/css/fileScope';
 
 function _arrayWithHoles(arr) {
   if (Array.isArray(arr)) return arr;
@@ -62,22 +63,6 @@ function _slicedToArray(arr, i) {
   return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
 }
 
-__vanilla_filescope__.setFileScope("packages/vanilla-extract/src/capsize.css.ts", "capsize");
-var capsizeVars = createThemeContract({
-  fontSize: null,
-  lineHeight: null,
-  capHeightTrim: null,
-  baselineTrim: null
-});
-var capsizeStyle = style(createStyleObject({
-  fontSize: capsizeVars.fontSize,
-  lineHeight: capsizeVars.lineHeight,
-  capHeightTrim: capsizeVars.capHeightTrim,
-  baselineTrim: capsizeVars.baselineTrim
-}), "capsizeStyle");
-
-__vanilla_filescope__.endFileScope();
-
 var createVanillaStyle = function createVanillaStyle(_ref) {
   var values = _ref.values,
       mediaQueries = _ref.mediaQueries,
diff --git a/dist/styles.css.cjs b/dist/styles.css.cjs
new file mode 100644
index 0000000000000000000000000000000000000000..525259a9557deddeb98f490edc5e995c8f2ac358
--- /dev/null
+++ b/dist/styles.css.cjs
@@ -0,0 +1,49 @@
+'use strict';
+
+Object.defineProperty(exports, '__esModule', { value: true });
+
+var css = require('@vanilla-extract/css');
+var core = require('@capsizecss/core');
+var __vanilla_filescope__ = require('@vanilla-extract/css/fileScope');
+
+function _interopNamespace(e) {
+  if (e && e.__esModule) return e;
+  var n = Object.create(null);
+  if (e) {
+    Object.keys(e).forEach(function (k) {
+      if (k !== 'default') {
+        var d = Object.getOwnPropertyDescriptor(e, k);
+        Object.defineProperty(n, k, d.get ? d : {
+          enumerable: true,
+          get: function () {
+            return e[k];
+          }
+        });
+      }
+    });
+  }
+  n['default'] = e;
+  return Object.freeze(n);
+}
+
+var __vanilla_filescope____namespace = /*#__PURE__*/_interopNamespace(__vanilla_filescope__);
+
+__vanilla_filescope____namespace.setFileScope("packages/vanilla-extract/src/capsize.css.ts", "capsize", 'file:' + __filename);
+var capsizeVars = css.createThemeContract({
+  fontSize: null,
+  lineHeight: null,
+  capHeightTrim: null,
+  baselineTrim: null
+});
+var capsizeStyle = css.style(core.createStyleObject({
+  fontSize: capsizeVars.fontSize,
+  lineHeight: capsizeVars.lineHeight,
+  capHeightTrim: capsizeVars.capHeightTrim,
+  baselineTrim: capsizeVars.baselineTrim
+}), "capsizeStyle");
+
+__vanilla_filescope____namespace.endFileScope();
+
+exports.capsizeVars = capsizeVars;
+exports.capsizeStyle = capsizeStyle;
+  
\ No newline at end of file
diff --git a/dist/styles.css.js b/dist/styles.css.js
new file mode 100644
index 0000000000000000000000000000000000000000..9eb166c97d1411c0444f87e994966a26bf5f1dad
--- /dev/null
+++ b/dist/styles.css.js
@@ -0,0 +1,21 @@
+export { precomputeValues } from '@capsizecss/core';
+import { createThemeContract, style } from '@vanilla-extract/css';
+import * as __vanilla_filescope__ from '@vanilla-extract/css/fileScope';
+
+__vanilla_filescope__.setFileScope("packages/vanilla-extract/src/capsize.css.ts", "capsize", import.meta.url);
+
+export var capsizeVars = createThemeContract({
+  fontSize: null,
+  lineHeight: null,
+  capHeightTrim: null,
+  baselineTrim: null
+});
+export var capsizeStyle = style(createStyleObject({
+  fontSize: capsizeVars.fontSize,
+  lineHeight: capsizeVars.lineHeight,
+  capHeightTrim: capsizeVars.capHeightTrim,
+  baselineTrim: capsizeVars.baselineTrim
+}), "capsizeStyle");
+
+__vanilla_filescope__.endFileScope();
+